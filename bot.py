#!/usr/local/bin/python3
# -*- coding: utf-8 -*-
import requests
import csv
import re
import logging
import datetime
import pyowm
import corona_parser
from parser_corona_data import Parser_CoronaVirus
from setup import PROXY, TOKEN
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, CallbackQueryHandler, CommandHandler, Filters, MessageHandler, Updater
from video_sending import Video_Corona
import graphic_draw

# import corona_parser
# Enable logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)

logger = logging.getLogger(__name__)

LOG_HISTORY = list()
Location_Aspect = dict()
Options = dict()
Options["Choose_country"] = False
Options["Choose_country_for_search_statistics"] = False
Options["Corona_stats_in_russia"] = False
Options["Choose_day"] = False
Options["Shift"] = 0
Options["location"] = " "


# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def update_log(func):
    def new_func(*argc, **kwargs):
        if argc[0] and hasattr(argc[0], 'message') and hasattr(argc[0], 'effective_user'):
            LOG_HISTORY.append({
                "user": argc[0].effective_user.first_name,
                "function": func.__name__,
                "message": argc[0].message.text,
                "date": argc[0].message.date,
            })
        return func(*argc, **kwargs)

    return new_func


# –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
BUTTON1 = "Province_State"
BUTTON2 = "Country_Region"
BUTTON3 = "Confirmed"
BUTTON4 = "Deaths"
BUTTON5 = "Recovered"
BUTTON6 = "CITY1"
BUTTON7 = "CITY2"
BUTTON8 = "CITY3"
BUTTON9 = "DETAILED_INFO_ABOUT_WEATHER"
BUTTON10 = "DOLLAR"
BUTTON11 = "EURO"
BUTTON12 = "CHOOSE_COUNTRY"
BUTTON13 = "Active"
BUTTON14 = "2_days"
BUTTON15 = "7_days"
BUTTON16 = "14_days"
BUTTON17 = "dynamics"
BUTTON18 = "confirmed"
BUTTON19 = "deaths"
BUTTON20 = "recovered"
BUTTON21 = "number_of_days"

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∫–Ω–æ–ø–∫–∞—Ö
TITLES = {
    BUTTON1: "–ü—Ä–æ–≤–∏–Ω—Ü–∏—è/–®—Ç–∞—Ç",
    BUTTON2: "–°—Ç—Ä–∞–Ω–∞/–†–µ–≥–∏–æ–Ω",
    BUTTON3: "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ —Å–ª—É—á–∞–∏",
    BUTTON4: "–£–º–µ—Ä–ª–æ",
    BUTTON5: "–í—ã–∑–¥–æ—Ä–æ–≤–µ–ª–æ",
    BUTTON6: "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥",
    BUTTON7: "–ú–æ—Å–∫–≤–∞",
    BUTTON8: "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
    BUTTON9: "‚ñ∂ –£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ‚óÄ",
    BUTTON10: "–î–æ–ª–ª–∞—Ä –°–®–ê ÔºÑ",
    BUTTON11: "–ï–≤—Ä–æ ‚Ç¨",
    BUTTON12: "‚ñ∂ –í–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã ‚óÄ",
    BUTTON13: "–ó–∞—Ä–∞–∂–µ–Ω–Ω—ã–µ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç",
    BUTTON14: "2 –¥–Ω—è",
    BUTTON15: "7 –¥–Ω–µ–π",
    BUTTON16: "14 –¥–Ω–µ–π",
    BUTTON17: "–û—Ç—Å–ª–µ–¥–∏—Ç—å –¥–∏–Ω–∞–º–∏–∫—É —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –≤–∏—Ä—É—Å–∞",
    BUTTON18: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤",
    BUTTON19: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫ —É–º–µ—Ä—à–∏—Ö",
    BUTTON20: "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫ –≤—ã–∑–¥–æ—Ä–æ–≤–µ–≤—à–∏—Ö",
    BUTTON21: "–í–≤–µ—Å—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π"
}


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã:
def corona_stats_keyboard():
    new_keyboard = [[InlineKeyboardButton(TITLES[BUTTON1], callback_data=BUTTON1),
                     InlineKeyboardButton(TITLES[BUTTON2], callback_data=BUTTON2)],
                    [InlineKeyboardButton(TITLES[BUTTON12], callback_data=BUTTON12)]]
    return InlineKeyboardMarkup(new_keyboard)


def corona_stats_dynamics_keyboard():
    new_keyboard = [[InlineKeyboardButton(TITLES[BUTTON14], callback_data=BUTTON14)],
                    [InlineKeyboardButton(TITLES[BUTTON15], callback_data=BUTTON15)],
                    [InlineKeyboardButton(TITLES[BUTTON16], callback_data=BUTTON16)],
                    [InlineKeyboardButton(TITLES[BUTTON21], callback_data=BUTTON21)]]
    return InlineKeyboardMarkup(new_keyboard)


def detailed_info_about_weather_keyboard():
    new_keyboard = [[InlineKeyboardButton(TITLES[BUTTON9], callback_data=BUTTON9)]]
    return InlineKeyboardMarkup(new_keyboard)


def city_keyboard():
    new_keyboard = [[InlineKeyboardButton(TITLES[BUTTON6], callback_data=BUTTON6)],
                    [InlineKeyboardButton(TITLES[BUTTON7], callback_data=BUTTON7)],
                    [InlineKeyboardButton(TITLES[BUTTON8], callback_data=BUTTON8)]]
    return InlineKeyboardMarkup(new_keyboard)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è. –í —Å–ø–∏—Å–∫–µ –ö–ê–ñ–î–´–ô –°–ü–ò–°–û–ö - –û–î–ù–ê –°–¢–†–û–ö–ê –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def money_keyboard():
    new_keyboard = [[InlineKeyboardButton(TITLES[BUTTON10], callback_data=BUTTON10),
                     InlineKeyboardButton(TITLES[BUTTON11], callback_data=BUTTON11)]]
    return InlineKeyboardMarkup(new_keyboard)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≥—Ä–∞—Ñ–∏–∫–∞
def graphic_keyboard():
    new_keyboard = [[InlineKeyboardButton(TITLES[BUTTON18], callback_data=BUTTON18)],
                    [InlineKeyboardButton(TITLES[BUTTON19], callback_data=BUTTON19)],
                    [InlineKeyboardButton(TITLES[BUTTON20], callback_data=BUTTON20)]]
    return InlineKeyboardMarkup(new_keyboard)


# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ
# def video_keyboard():
# new_keyboard = [[InlineKeyboardButton(TITLES[BUTTON19], callback_data=BUTTON19)]]
# return InlineKeyboardMarkup(new_keyboard)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –≤—ã–±–æ—Ä–æ–º –∫—Ä–∏—Ç–µ—Ä–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞
def aspect_keyboard():
    new_keyboard = [[InlineKeyboardButton(TITLES[BUTTON3], callback_data=BUTTON3)],
                    [InlineKeyboardButton(TITLES[BUTTON13], callback_data=BUTTON13)],
                    [InlineKeyboardButton(TITLES[BUTTON4], callback_data=BUTTON4),
                     InlineKeyboardButton(TITLES[BUTTON5], callback_data=BUTTON5)]]
    return InlineKeyboardMarkup(new_keyboard)


# Define a few command handlers. These usually take the two arguments update and
# context. Error handlers also receive the raised TelegramError object in error.
@update_log
def check_weather(update: Update, context: CallbackContext):
    chat_id = update.message.chat_id
    context.bot.send_message(
        chat_id=chat_id,
        text="–í—ã–±–µ—Ä–µ—Ç–µ –≥–æ—Ä–æ–¥! üëÄ",
        reply_markup=city_keyboard())


@update_log
def money(update: Updater, context: CallbackContext):
    chat_id = update.message.chat_id
    context.bot.send_message(
        chat_id=chat_id,
        text="–í—ã–±–µ—Ä–µ—Ç–µ –≤–∞–ª—é—Ç—É!",
        reply_markup=money_keyboard())


# –ö–æ–≥–¥–∞ –º—ã –≤–≤–æ–¥–∏–º /corona_stats, —Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç–≤–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
# –î–∞–ª–µ–µ –º—ã –ø–æ–ø–∞–¥–∞–µ–º –≤ keyboard_handler
@update_log
def corona_stats(update: Updater, context: CallbackContext):
    chat_id = update.message.chat_id
    text = "–í—ã–±–µ—Ä–µ—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –≤–∏—Ä—É—Å–∞ COVID-19 üòà"
    context.bot.send_message(
        chat_id=chat_id,
        text=text,
        reply_markup=corona_stats_keyboard())


@update_log
def corona_stats_in_russia(update: Updater, context: CallbackContext):
    chat_id = update.message.chat_id
    text = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—É–±—ä–µ–∫—Ç–∞ –†–§ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏—Ä—É—Å–µ\n (–°—É–±—ä–µ–∫—Ç –†–§ - —Ä–µ—Å–ø—É–±–ª–∏–∫–∞, –∫—Ä–∞–π, –æ–±–ª–∞—Å—Ç—å, –≥–æ—Ä–æ–¥ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è, –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –æ–∫—Ä—É–≥)"
    Options["Corona_stats_in_russia"] = True
    context.bot.send_message(
        chat_id=chat_id,
        text=text)
    corona_parser.parse()


@update_log
def corona_video(update: Updater, context: CallbackContext):
    chat_id = update.message.chat_id
    text = "–í–∏–¥–µ–æ –æ –∫–æ—Ä–æ–Ω–æ–≤–∏—Ä—É—Å–µ"
    context.bot.send_message(
        chat_id=chat_id,
        text=text,
        reply_markup=video_keyboard())


@update_log
def corona_stats_dynamics(update: Updater, context: CallbackContext):
    chat_id = update.message.chat_id
    text = "–î–∏–Ω–∞–º–∏–∫–∞ —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –≤–∏—Ä—É—Å–∞ ü¶† –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ"
    context.bot.send_message(
        chat_id=chat_id,
        text=text,
        reply_markup=corona_stats_dynamics_keyboard())


@update_log
def start(update: Update, context: CallbackContext):
    """Send a message when the command /start is issued."""
    smile = u'\U0001F603'
    update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name} {smile}!")


@update_log
def chat_help(update: Update, context: CallbackContext):
    """Send a message when the command /help is issued."""
    tmp = ["–í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞.",
           "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /history, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–µ–π—Å—Ç–≤–∏–π.",
           "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /time, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Ä–µ–º—è, –ø—Ä–æ—à–µ–¥—à–µ–µ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.",
           "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /date, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è.",
           "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /fact, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–∞–º—ã–π –∑–∞–ª–∞–π–∫–∞–Ω–Ω—ã–π –ø–æ—Å—Ç –Ω–∞ cat-fact.herokuapp.com",
           "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /weather, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–≥–æ–¥—É.",
           "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /check_exchange_rates, —á—Ç–æ–±—ã –∫—É—Ä—Å –≤–∞–ª—é—Ç.",
           "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /corona_stats, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ—Ä–æ–Ω–æ–≤–∏—Ä—É—Å—É.",
           "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /corona_stats_in_russia, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—Ä–æ–Ω–æ–≤–∏—Ä—É—Å–µ –≤ –†–æ—Å—Å–∏–∏.",
           "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /corona_stats_dynamics, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–∏–Ω–∞–º–∏–∫—É —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –≤–∏—Ä—É—Å–∞."
           "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /corona_video, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ–ª–µ–∑–Ω–æ–µ –≤–∏–¥–µ–æ –ø—Ä–æ –∫–æ—Ä–æ–Ω–æ–≤–∏—Ä—É—Å"]
    update.message.reply_text('\n'.join(tmp))


def to_fixed(value: int, digits=0):
    return f"{value:.{digits}f}"


@update_log
def echo(update: Update, context: CallbackContext):
    chat_id = update.message.chat_id
    if not (Options["Choose_country"] or Options["Choose_country_for_search_statistics"] or
            Options["Corona_stats_in_russia"] or Options["Choose_day"]):
        text = update.message.text
        context.bot.send_message(
            chat_id=chat_id,
            text=text)
    elif Options["Choose_day"]:
        matcher = r"\d+\d?"
        matched_day = re.findall(matcher, update.message.text)
        if matched_day:
            Options["Shift"] = matched_day[0]
        else:
            context.bot.send_message(
                chat_id=chat_id,
                text="–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π")
            return
        context.bot.send_message(
            chat_id=chat_id,
            text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã")
        Options["Choose_day"] = False
        Options["Choose_country_for_search_statistics"] = True
    elif Options["Corona_stats_in_russia"]:
        location = update.message.text
        with open("russian_data.csv", 'r', encoding='utf-8') as file:
            reader = csv.DictReader(file)
            for row in reader:
                if row["–†–µ–≥–∏–æ–Ω"] == location:
                    context.bot.send_message(
                        chat_id=chat_id,
                        text=f'–†–µ–≥–∏–æ–Ω: {row["–†–µ–≥–∏–æ–Ω"]}\n–ó–∞—Ä–∞–∂–µ–Ω–æ: {row["–ó–∞—Ä–∞–∂–µ–Ω–æ"]} ü§í\n–í—ã–ª–µ—á–µ–Ω–æ: {row["–í—ã–ª–µ—á–µ–Ω–æ"]} üòá\n–ü–æ–≥–∏–±–ª–æ: {row["–ü–æ–≥–∏–±–ª–æ"]} üòµ')
                    Options["Corona_stats_in_russia"] = False
                    return
            context.bot.send_message(
                chat_id=chat_id,
                text="–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏–ª–∏ –æ–±–ª–∞—Å—Ç–∏ üòü")
    elif Options["Choose_country"] or Options["Choose_country_for_search_statistics"]:
        chat_id = update.message.chat_id
        parser = Parser_CoronaVirus()
        parser.find_actual_data()
        data = parser.get_dynamics_info(target_country=update.message.text)
        if not parser.found_data:
            context.bot.send_message(
                chat_id=chat_id,
                text="–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã üòü")
            return
        # –î–ª—è –∫–æ—Ä–æ–Ω–∞ —Å—Ç–∞—Ç—Å
        if Options["Choose_country"]:
            context.bot.send_message(
                chat_id=chat_id,
                text=f"Confirmed: {data['Confirmed']} üò∑ü§í\nDeaths: {data['Deaths']} üòµ\nRecovered: {data['Recovered']} üòá\nActive: {data['Active']} ü§í")
            Options["Choose_country"] = False
        # –î–ª—è –∫–æ—Ä–æ–Ω–∞ –¥–∏–Ω–∞–º–∏–∫—Å
        else:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
            try:
                parser.find_actual_data(int(Options["Shift"]))
            except Exception as e:
                print(repr(e))
                context.bot.send_message(
                    chat_id=chat_id,
                    text="–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π")
                Options["Choose_country_for_search_statistics"] = False
                Options["Choose_day"] = True
                return

            old_data = parser.get_dynamics_info(target_country=update.message.text)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞ –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å –∏ —Å—É—â–µ—Ç—Å–≤—É–µ—Ç –ª–∏ –≤–æ–æ–±—â–µ old_data
            if not parser.found_data or not old_data["Confirmed"] or not old_data["Deaths"] or not old_data[
                "Recovered"] or not old_data["Active"]:
                context.bot.send_message(
                    chat_id=chat_id,
                    text="–î–∞–Ω–Ω—ã—Ö –Ω–∞ –¥–∞–Ω–Ω—ã–π –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –ø–æ–∫–∞ —á—Ç–æ –Ω–µ —Å—É—â–µ—Ç—Å–≤—É–µ—Ç")
                Options["Choose_country_for_search_statistics"] = False
                Options["Choose_country"] = False
                return
            growth = {
                "Confirmed_growth": (data["Confirmed"] - old_data["Confirmed"]) / old_data["Confirmed"] * 100,
                "Death_growth": (data["Deaths"] - old_data["Deaths"]) / old_data["Deaths"] * 100,
                "Recovered_growth": (data["Recovered"] - old_data["Recovered"]) / old_data["Recovered"] * 100,
                "Active_growth": (data["Active"] - old_data["Active"]) / old_data["Active"] * 100}
            for key in growth.keys():
                if growth[key] > 0:
                    growth[key] = '+' + to_fixed(abs(growth[key]), 2) + ' % ' + '‚Üó'
                else:
                    growth[key] = '-' + to_fixed(abs(growth[key]), 2) + ' % ' + '‚Üò'
            context.bot.send_message(
                chat_id=chat_id,
                text=(
                    f"Confirmed increaseü§í: {data['Confirmed'] - old_data['Confirmed']}, {growth['Confirmed_growth']}\n"
                    f"Death increase         üòµ: {data['Deaths'] - old_data['Deaths']}, {growth['Death_growth']}\n"
                    f"Recovered increaseüòá: {data['Recovered'] - old_data['Recovered']}, {growth['Recovered_growth']}\n"
                    f"Active increase         üò∑: {data['Active'] - old_data['Active']}, {growth['Active_growth']}"),
                reply_markup=graphic_keyboard())
            Options["Choose_country_for_search_statistics"] = False
        return


@update_log
def error(update: Update, context: CallbackContext):
    """Log Errors caused by Updates."""
    logger.warning(f'Update {update} caused error {context.error}')


@update_log
def elapsed_time(update: Updater, context: CallbackContext):
    user = update.effective_user.first_name
    period = datetime.timedelta(0)
    if len(LOG_HISTORY) > 1:
        for i in range(len(LOG_HISTORY) - 2, -1, -1):
            if LOG_HISTORY[i]["user"] == user:
                time_delta = datetime.timedelta(hours=3, minutes=0, seconds=0)
                period = LOG_HISTORY[i]["date"] + time_delta
                period = datetime.datetime.now() - period
                break
    update.message.reply_text(f"–ü—Ä–æ—à–ª–æ {period.seconds // 3600} —á–∞—Å–æ–≤, {(period.seconds % 3600) // 60} \
            –º–∏–Ω—É—Ç, {(period.seconds % 3600) % 60} —Å–µ–∫—É–Ω–¥ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")


@update_log
def date(update: Updater, context: CallbackContext):
    now = datetime.datetime.now()
    update.message.reply_text(f"–î–∞—Ç–∞: {now.day}.{now.month}.{now.year}\n–í—Ä–µ–º—è: {now.hour}:{now.minute}")


def get_data_with_url(url: str):
    try:
        req = requests.get(url)
        if req.ok:  # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Å–ø–µ—à–Ω–æ–µ
            return req.json()
    except Exception as err:
        print(f'Error occurred: {err}')


def fact(url="URL"):
    data = get_data_with_url(url)
    if data is None:
        return "We don't see cats, so cannot find the cutest("
    all_posts = data["all"]
    max_upvotes = 0
    max_posts = []
    for post in all_posts:
        if post['upvotes'] >= max_upvotes:
            max_upvotes = post['upvotes']
            max_posts.append(post["text"])

    if max_posts == [] or max_upvotes == 0:
        return "It's impossible to find the most upvoted post, all are cute!"
    return f"–°–∞–º—ã–π –∑–∞–ª–∞–π–∫–∞–Ω–Ω—ã–π –ø–æ—Å—Ç - —ç—Ç–æ: {', '.join(max_posts)}"


@update_log
def send_cat_fact(update: Updater, context: CallbackContext):
    cat_post = fact("https://cat-fact.herokuapp.com/facts")
    update.message.reply_text(cat_post)


@update_log
def send_corona_video(update: Update, context: CallbackContext):
    video_sender = Video_Corona()
    video = video_sender.show_me_video()
    update.message.reply_text(video)


@update_log
def history(update: Updater, context: CallbackContext):
    i_start, end = 0, 0
    with open("history.txt", 'a') as handle:
        if len(LOG_HISTORY) == 1 and LOG_HISTORY[0]["function"] == "history":
            update.message.reply_text("There are no recent actions")
            handle.write("There are no recent actions\n")
        else:
            answer = []
            if len(LOG_HISTORY) < 5:
                end = len(LOG_HISTORY)
                answer.append("Last actions are:")
            else:
                i_start, end = len(LOG_HISTORY) - 5, len(LOG_HISTORY)
                answer.append("Last five actions are:")
            for i in range(i_start, end):
                answer.append(f"Action {i + 1}:")
                for key, value in LOG_HISTORY[i].items():
                    answer.append(key + " : " + str(value))
                answer[len(answer) - 1] += '\n'
            update.message.reply_text('\n'.join(answer))
            handle.write('\n'.join(answer) + '\n')


# –ù–µ–æ–±—Ö–æ–¥–∏–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /check_exchange_rates
def get_money(name):
    my_xml = get_data_with_url("https://www.cbr-xml-daily.ru/daily_json.js")
    countries = my_xml["Valute"]
    answer = None
    for country, currency in countries.items():
        if currency['Name'] == name[:-2] and currency["Value"] != 0:
            answer = f"–°—Ç–æ–∏–º–æ—Å—Ç—å {currency['Name']} —Å–µ–π—á–∞—Å {currency['Value']} ‚ÇΩ"
            return answer

    if answer is None:
        return "–ù–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –¥–∞–Ω–Ω–æ–π –≤–∞–ª—é—Ç–µ"


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã. –¢—É—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤—Å—è –ª–æ–≥–∏–∫–∞ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–ª–∞–≤–∏—à–∏:
def keyboard_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    data = query.data
    chat_id = update.effective_message.chat_id
    if data in (BUTTON1, BUTTON2):
        text = {
            BUTTON1: "–í—ã–±–µ—Ä–µ—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–π, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω —Ç–æ–ø 5 –ø—Ä–æ–≤–∏–Ω–∏—Ü–∏–π/—à—Ç–∞—Ç–æ–≤ —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π!",
            BUTTON2: "–í—ã–±–µ—Ä–µ—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–π, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ —Ç–æ–ø 5 —Å—Ç—Ä–∞–Ω/—Ä–µ–≥–∏–æ–Ω–æ–≤ —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π!"}
        Location_Aspect["location"] = data
        context.bot.send_message(
            chat_id=chat_id,
            text=text[data],
            reply_markup=aspect_keyboard())
    elif data in (BUTTON3, BUTTON4, BUTTON5, BUTTON13):
        smile = {BUTTON3: 'üò∑ü§í', BUTTON4: 'üòµ', BUTTON5: 'üòá', BUTTON13: 'ü§í'}
        Location_Aspect["aspect"] = data
        parser = Parser_CoronaVirus()
        parser.find_actual_data()
        parser.answer.append(Location_Aspect["aspect"] + ' ' + smile[data])
        parser.find_top_five(Location_Aspect["location"], Location_Aspect["aspect"])
        context.bot.send_message(
            chat_id=chat_id,
            text='\n'.join(parser.answer))
    elif data in (BUTTON6, BUTTON7, BUTTON8):
        place = TITLES[data]
        Location_Aspect["CURRENT_CITY"] = place
        owm = pyowm.OWM('6d00d1d4e704068d70191bad2673e0cc', language="ru")
        observation = owm.weather_at_place(place)
        w = observation.get_weather()
        status = w.get_detailed_status()
        temp = w.get_temperature('celsius')
        kinds_of_weather = {"—è—Å–Ω–æ": "‚òÄ\n", "–æ–±–ª–∞—á–Ω–æ": "‚òÅ\n", "–¥–æ–∂–¥–ª–∏–≤–æ": "üåß\n", "other": "\n"}
        if status not in kinds_of_weather.keys():
            kind_of_weather = kinds_of_weather["other"]
        else:
            kind_of_weather = kinds_of_weather[status]
        answer = "–í –≥–æ—Ä–æ–¥–µ " + place + " —Å–µ–π—á–∞—Å " + status + kind_of_weather
        if temp["temp"] <= 0:
            answer += "–°–µ–π—á–∞—Å –æ—á–µ–Ω—å —Ö–æ–ª–æ–¥–Ω–æ! –û–¥–µ–≤–∞–π—Å—è –∫–∞–∫ —Ç–∞–Ω–∫!! ü•∂\n"
        elif temp["temp"] < 16:
            answer += "–°–µ–π—á–∞—Å –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ, –ª—É—á—à–µ –æ–¥–µ–Ω—å—Å—è –ø–æ—Ç–µ–ø–ª–µ–µ! üëç\n"
        else:
            answer += "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ —Å–∞–º—ã–π —Ä–∞–∑! –û–¥–µ–≤–∞–π—Å—è, –∫–∞–∫ —Ö–æ—á–µ—à—å! üòä\n"
        context.bot.send_message(
            chat_id=chat_id,
            text=answer,
            reply_markup=detailed_info_about_weather_keyboard())
    elif data in BUTTON9:
        owm = pyowm.OWM('6d00d1d4e704068d70191bad2673e0cc', language="ru")
        observation = owm.weather_at_place(Location_Aspect["CURRENT_CITY"])
        w = observation.get_weather()
        status = w.get_detailed_status()
        temp = w.get_temperature('celsius')
        sunrise = w.get_sunrise_time('iso')
        sunset = w.get_sunset_time('iso')
        sunrise = sunrise[sunrise.find(" "): sunrise.find("+")]
        sunset = sunset[sunset.find(" "): sunset.find("+")]
        shift = int(sunrise[:sunrise.find(":")]) + 3
        if shift < 10:
            sunrise = '0' + str(shift) + sunrise[sunrise.find(":"):]
        else:
            sunrise = str(shift) + sunrise[sunrise.find(":"):]
        shift = int(sunset[:sunset.find(":")]) + 3
        if shift < 10:
            sunset = '0' + str(shift) + sunset[sunset.find(":"):]
        else:
            sunset = str(shift) + sunset[sunset.find(":"):]
        answer = "–°–µ–≥–æ–¥–Ω—è: \n"
        answer += "‚úÖ –í –≥–æ—Ä–æ–¥–µ " + Location_Aspect["CURRENT_CITY"] + " —Å–µ–π—á–∞—Å " + status + '\n'
        answer += "‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: " + str(temp["temp_max"]) + ' –≥—Ä–∞–¥—É—Å–æ–≤ \n'
        answer += "‚úÖ –°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: " + str(temp["temp"]) + ' –≥—Ä–∞–¥—É—Å–æ–≤ \n'
        answer += "‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: " + str(temp["temp_min"]) + ' –≥—Ä–∞–¥—É—Å–æ–≤ \n'
        answer += "‚úÖ –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: " + str(w.get_wind()['speed']) + ' –º/—Å \n'
        answer += "‚úÖ –í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞: " + str(w.get_humidity()) + ' % \n'
        answer += "‚úÖ –î–∞–≤–ª–µ–Ω–∏–µ: " + str(round(w.get_pressure()['press'] * 100 * 0.00750063755419211)) + ' –º–º.—Ä—Ç.—Å—Ç\n'
        answer += "‚úÖ –í—Ä–µ–º—è —Ä–∞—Å—Å–≤–µ—Ç–∞: " + sunrise + ' \n'
        answer += "‚úÖ –í—Ä–µ–º—è –∑–∞–∫–∞—Ç–∞: " + sunset + ' \n'
        context.bot.send_message(
            chat_id=chat_id,
            text=answer)
    elif data in BUTTON10:
        context.bot.send_message(
            chat_id=chat_id,
            text=get_money(TITLES[data]))
    elif data in BUTTON11:
        context.bot.send_message(
            chat_id=chat_id,
            text=get_money(TITLES[data]))
    elif data in BUTTON12:
        Options["Choose_country"] = True
    elif data == BUTTON14 or data == BUTTON15 or data == BUTTON16:
        context.bot.send_message(
            chat_id=chat_id,
            text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã")
        Options["Shift"] = int(data[:data.find("_")]) + 1
        Options["Choose_country_for_search_statistics"] = True
    elif data == BUTTON21:
        # –ï—Å–ª–∏ –º—ã –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å –≤—ã–±–æ—Ä–æ–º –¥–Ω—è
        Options["Choose_day"] = True
    elif data in BUTTON18:
        print(Options["location"])
        Options["location"] = LOG_HISTORY[-1]["message"]
        graph = graphic_draw.Statistics()
        graph.create_graphic_information(Options["Shift"], Options["location"], "confirmed")
        # Statistics.graphic_draw(Options["Shift"], Options["location"], "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")
        context.bot.send_photo(
            chat_id=chat_id,
            photo=open("graphic.png", "rb"))
    elif data in BUTTON19:
        print(Options["location"])
        Options["location"] = LOG_HISTORY[-1]["message"]
        graph = graphic_draw.Statistics()
        graph.create_graphic_information(Options["Shift"], Options["location"], "deaths")
        # Statistics.graphic_draw(Options["Shift"], Options["location"], "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")
        context.bot.send_photo(
            chat_id=chat_id,
            photo=open("graphic.png", "rb"))

    elif data in BUTTON20:
        print(Options["location"])
        Options["location"] = LOG_HISTORY[-1]["message"]
        graph = graphic_draw.Statistics()
        graph.create_graphic_information(Options["Shift"], Options["location"], "recovered")
        # Statistics.graphic_draw(Options["Shift"], Options["location"], "https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv")
        context.bot.send_photo(
            chat_id=chat_id,
            photo=open("graphic.png", "rb"))


# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞, –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞:
def main():
    bot = Bot(
        token=TOKEN,
        base_url=PROXY)  # delete it if connection via VPN
    updater = Updater(bot=bot, use_context=True)

    # on different commands - answer in Telegram
    updater.dispatcher.add_handler(CommandHandler('start', start))
    updater.dispatcher.add_handler(CommandHandler('help', chat_help))
    updater.dispatcher.add_handler(CommandHandler('history', history))
    updater.dispatcher.add_handler(CommandHandler('time', elapsed_time))
    updater.dispatcher.add_handler(CommandHandler('date', date))
    updater.dispatcher.add_handler(CommandHandler('fact', send_cat_fact))
    updater.dispatcher.add_handler(CommandHandler('weather', check_weather))
    updater.dispatcher.add_handler(CommandHandler('corona_stats', corona_stats))
    updater.dispatcher.add_handler(CommandHandler('corona_stats_in_russia', corona_stats_in_russia))
    updater.dispatcher.add_handler(CommandHandler('corona_stats_dynamics', corona_stats_dynamics))
    updater.dispatcher.add_handler(CommandHandler('check_exchange_rates', money))
    updater.dispatcher.add_handler(CommandHandler('corona_video', send_corona_video))
    updater.dispatcher.add_handler(CallbackQueryHandler(callback=keyboard_handler, pass_chat_data=True))

    # on non-command i.e message - echo the message on Telegram
    updater.dispatcher.add_handler(MessageHandler(Filters.text, echo))

    # log all errors
    updater.dispatcher.add_error_handler(error)

    # Start the Bot
    updater.start_polling()

    # Run the bot until you press Ctrl-C or the process receives SIGINT,
    # SIGTERM or SIGABRT. This should be used most of the time, since
    # start_polling() is non-blocking and will stop the bot gracefully.
    updater.idle()


if __name__ == '__main__':
    logger.info('Start Bot')
    main()
