#!/usr/local/bin/python3
# -*- coding: utf-8 -*-

import logging
import requests
import datetime
import csv
import pyowm

from setup import PROXY, TOKEN
from telegram import Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CallbackContext, CallbackQueryHandler, CommandHandler, Filters, MessageHandler, Updater

# Enable logging
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    level=logging.INFO)

logger = logging.getLogger(__name__)

LOG_HISTORY = list()
Location_Aspect = dict()

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è:
def update_log(func):
    def new_func(*argc, **kwargs):
        if argc[0] and hasattr(argc[0], 'message') and hasattr(argc[0], 'effective_user'):
            LOG_HISTORY.append({
                "user" : argc[0].effective_user.first_name,
                "function" : func.__name__,
                "message" : argc[0].message.text,
                "date": argc[0].message.date,
                })
        return func(*argc, **kwargs)
    return new_func

# –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã
BUTTON1 = "LOCATION_BUTTON_LEFT"
BUTTON2 = "LOCATION_BUTTON_RIGHT"
BUTTON3 = "ASPECT_BUTTON_TOP"
BUTTON4 = "ASPECT_BUTTON_LEFT"
BUTTON5 = "ASPECT_BUTTON_RIGHT"
BUTTON6 = "CITY1"
BUTTON7 = "CITY2"
BUTTON8 = "CITY3"
BUTTON9 = "DETAILED_INFO_ABOUT_WEATHER"
BUTTON10 = "DOLLAR"
BUTTON11 = "EVRO"

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∫–Ω–æ–ø–∫–∞—Ö
TITLES = {
    BUTTON1: "–ü—Ä–æ–≤–∏–Ω—Ü–∏—è/–®—Ç–∞—Ç",
    BUTTON2: "–°—Ç—Ä–∞–Ω–∞/–†–µ–≥–∏–æ–Ω",
    BUTTON3: "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω—ã–µ —Å–ª—É—á–∞–∏",
    BUTTON4: "–£–º–µ—Ä–ª–æ",
    BUTTON5: "–í—ã–∑–¥–æ—Ä–æ–≤–µ–ª–æ",
    BUTTON6: "–ù–∏–∂–Ω–∏–π –ù–æ–≤–≥–æ—Ä–æ–¥",
    BUTTON7: "–ú–æ—Å–∫–≤–∞",
    BUTTON8: "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥",
    BUTTON9: "‚ñ∂ –£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ‚óÄ",
    BUTTON10: "–î–æ–ª–ª–∞—Ä –°–®–ê ÔºÑ",
    BUTTON11: "–ï–≤—Ä–æ ‚Ç¨",
}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã:
def detailed_info_about_weather_keyboard():
    new_keyboard = [
        [InlineKeyboardButton(TITLES[BUTTON9], callback_data=BUTTON9)],
    ]
    return InlineKeyboardMarkup(new_keyboard)

def city_keyboard():
    new_keyboard = [
        [InlineKeyboardButton(TITLES[BUTTON6], callback_data=BUTTON6)],
        [InlineKeyboardButton(TITLES[BUTTON7], callback_data=BUTTON7)],
        [InlineKeyboardButton(TITLES[BUTTON8], callback_data=BUTTON8)],
    ]
    return InlineKeyboardMarkup(new_keyboard)

# –ö–ª–∞–≤–∞ —Å –≤—ã–±–æ—Ä–æ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è. –í —Å–ø–∏—Å–∫–µ –ö–ê–ñ–î–´–ô –°–ü–ò–°–û–ö - –û–î–ù–ê –°–¢–†–û–ö–ê –∫–ª–∞–≤—ã. –¢—É—Ç 1 —Å—Ç—Ä–æ–∫–∞
def location_keyboard():
    new_keyboard = [
        [
        InlineKeyboardButton(TITLES[BUTTON1], callback_data=BUTTON1),
        InlineKeyboardButton(TITLES[BUTTON2], callback_data=BUTTON2),
        ]
    ]
    return InlineKeyboardMarkup(new_keyboard)

def money_keyboard():
    new_keyboard = [
        [
        InlineKeyboardButton(TITLES[BUTTON10], callback_data=BUTTON10),
        InlineKeyboardButton(TITLES[BUTTON11], callback_data=BUTTON11),
        ]
    ]
    return InlineKeyboardMarkup(new_keyboard)

# –ö–ª–∞–≤–∞ —Å –≤—ã–±–æ—Ä–æ–º –∫—Ä–∏—Ç–µ—Ä–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞. 2 —Å—Ç—Ä–æ–∫–∏ ( –≤ —Å–ø–∏—Å–∫–µ 2 —Å–ø–∏—Å–∫–∞)
def aspect_keyboard():
    new_keyboard = [
        [
            InlineKeyboardButton(TITLES[BUTTON3], callback_data=BUTTON3),
        ],
        [
            InlineKeyboardButton(TITLES[BUTTON4], callback_data=BUTTON4),
            InlineKeyboardButton(TITLES[BUTTON5], callback_data=BUTTON5),
        ]
    ]
    return InlineKeyboardMarkup(new_keyboard)

# Define a few command handlers. These usually take the two arguments update and
# context. Error handlers also receive the raised TelegramError object in error.

@update_log
def check_weather(update: Update, context: CallbackContext):
    chat_id = update.message.chat_id
    context.bot.send_message(
        chat_id=chat_id,
        text= "–í—ã–±–µ—Ä–µ—Ç–µ –≥–æ—Ä–æ–¥! üëÄ",
        reply_markup= city_keyboard(),
    )
@update_log
def money(update: Updater, context: CallbackContext):
    chat_id = update.message.chat_id
    context.bot.send_message(
        chat_id=chat_id,
        text="–í—ã–±–µ—Ä–µ—Ç–µ –≤–∞–ª—é—Ç—É!",
        reply_markup=money_keyboard(),
    )

# –ö–æ–≥–¥–∞ –º—ã –≤–≤–æ–¥–∏–º /corono_stats, —Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç–≤–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∏ –∫–ª–∞–≤—É.
# –î–∞–ª—å—à–µ –º—ã –ø–æ–ø–∞–¥–∞–µ–º –≤ keyboard_handler, —Å–º–æ—Ç—Ä–µ—Ç—å –≤—ã—à–µ
@update_log
def corono_stats(update: Updater, context: CallbackContext):
    chat_id = update.message.chat_id
    text = "–í—ã–±–µ—Ä–µ—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –≤–∏—Ä—É—Å–∞ COVID-19 üòà"
    context.bot.send_message(
        chat_id=chat_id,
        text=text,
        reply_markup=location_keyboard(),
    )

@update_log
def start(update: Update, context: CallbackContext):
    """Send a message when the command /start is issued."""
    smile = u'\U0001F603'
    update.message.reply_text(f"–ü—Ä–∏–≤–µ—Ç, {update.effective_user.first_name} {smile}!")

@update_log
def chat_help(update: Update, context: CallbackContext):
    """Send a message when the command /help is issued."""
    tmp = ["–í–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞.",
           "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /history, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –¥–µ–π—Å—Ç–≤–∏–π.",
           "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /time, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Ä–µ–º—è, –ø—Ä–æ—à–µ–¥—à–µ–µ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.",
           "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /date, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è.",
           "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /fact, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–∞–º—ã–π –∑–∞–ª–∞–π–∫–∞–Ω–Ω—ã–π –ø–æ—Å—Ç –Ω–∞ cat-fact.herokuapp.com",
           "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /weather, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–≥–æ–¥—É.",
           "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /check_exchange_rates, —á—Ç–æ–±—ã –∫—É—Ä—Å –≤–∞–ª—é—Ç.",
           "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /corono_stats, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–æ—Ä–æ–Ω–æ–≤–∏—Ä—É—Å—É."]
    update.message.reply_text('\n'.join(tmp))

@update_log
def echo(update: Update, context: CallbackContext):
    """Echo the user message."""
    chat_id = update.message.chat_id
    text = update.message.text
    context.bot.send_message(
        chat_id=chat_id,
        text=text,
    )

@update_log
def error(update: Update, context: CallbackContext):
    """Log Errors caused by Updates."""
    logger.warning(f'Update {update} caused error {context.error}')

@update_log
def elapsed_time(update: Updater, context: CallbackContext):
    user = update.effective_user.first_name
    period = datetime.timedelta(0)
    if len(LOG_HISTORY) > 1:
        for i in range(len(LOG_HISTORY) - 2, -1, -1):
            if LOG_HISTORY[i]["user"] == user:
                time_delta = datetime.timedelta(hours=3, minutes=0, seconds=0)
                period = LOG_HISTORY[i]["date"] + time_delta
                period = datetime.datetime.now() - period
                print(str(i) , str(period))
                break
    update.message.reply_text(f"–ü—Ä–æ—à–ª–æ {period.seconds // 3600} —á–∞—Å–æ–≤, {(period.seconds % 3600) // 60} –º–∏–Ω—É—Ç, {(period.seconds % 3600) % 60} —Å–µ–∫—É–Ω–¥ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")

@update_log
def date(update: Updater, context: CallbackContext):
    now = datetime.datetime.now()
    update.message.reply_text(f"–î–∞—Ç–∞: {now.day}.{now.month}.{now.year}\n–í—Ä–µ–º—è: {now.hour}:{now.minute}")

@update_log 
def fact(update: Updater, context: CallbackContext):
    r = requests.get("https://cat-fact.herokuapp.com/facts")
    p = r.json()
    all_posts = p["all"]
    all_votes = [all_posts[i]["upvotes"] for i in range(len(all_posts) - 1)]
    update.message.reply_text(f"–°–∞–º—ã–π –∑–∞–ª–∞–π–∫–∞–Ω–Ω—ã–π –ø–æ—Å—Ç —ç—Ç–æ { all_posts[all_votes.index(max(all_votes))]['text']}")


@update_log
def history(update: Updater, context: CallbackContext):
    I_start, end = 0, 0
    with open("history.txt", 'a') as handle:
        if len(LOG_HISTORY) == 1 and LOG_HISTORY[0]["function"] == "history":
            update.message.reply_text("There are no recent actions")
            handle.write("There are no recent actions\n")
        else:
            answer = []
            if len(LOG_HISTORY) < 5:
                end = len(LOG_HISTORY)
                answer.append("Last actions are:")
            else:
                I_start, end = len(LOG_HISTORY) - 5, len(LOG_HISTORY)
                answer.append("Last five actions are:")
            for i in range(I_start, end):
                answer.append(f"Action {i + 1}:")
                for key, value in LOG_HISTORY[i].items():
                    answer.append(key + " : " + str(value))
                answer[len(answer) - 1] += '\n'
            update.message.reply_text('\n'.join(answer))
            handle.write('\n'.join(answer) + '\n')

# –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /corono_stats
# –°–∫–∞—á–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–∑–º–æ–∂–Ω—ã–π —Ñ–∞–π–ª —Å –≥–∏—Ç—Ö–∞–±–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —á–∞—Å—Ç—å –æ—Ç–≤–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
def download_actual_file():
    answer = list()
    now = datetime.datetime.today()
    now = now.strftime("%m/%d/%Y")
    now = now.split('/')
    link = f"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/{now[0]}-{now[1]}-{now[2]}.csv"
    r = requests.get(link)
    if r.status_code == 200:
        answer.append("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∏—Ä—É—Å–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:")
    # If there isn't information today, we will take the information for yesterday
    else:
        while not r.status_code == 200:
            now[1] = int(now[1])
            if now[1] <= 10:
                now[1] = '0' + str(now[1] - 1)
            else:
                now[1] = str(now[1] - 1)
            link = f"https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_daily_reports/{now[0]}-{now[1]}-{now[2]}.csv"
            r = requests.get(link)
        answer.append(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ–∫–∞ –Ω–µ—Ç. –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ {'/'.join(now)} –æ –≤–∏—Ä—É—Å–µ:")
    # Downloading current file
    with open("current_info.csv", 'w', encoding='utf-8') as csvfile:
        csvfile.writelines(r.text)
    return answer
    #return answer

# –ü–æ–ª—É—á–∏–≤ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏ –∫—Ä–∏—Ç–µ—Ä–∏–π, –≤—Ç–∞—Å–∫–∏–≤–∞–µ–º –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ answer —á–µ—Ä–µ–∑ –±—É—Ñ–µ—Ä–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å Provinces
def get_necessary_corona_info(location: str, aspect: str, answer: list):
    # Getting information
    with open("current_info.csv", 'r') as csvfile:
        places = list()
        new_places = list()
        buffer = list()
        reader = csv.DictReader(csvfile)
        # Append number of infected people in provinces
        for row in reader:
            if row[location]:
                pair = [
                    row[location],
                    int(row[aspect]),
                ]
                places.append(pair)
        for el in places:
            if el[0] not in buffer:
                buffer.append(el[0])
                new_places.append(el)
            else:
                for pair in new_places:
                    if pair[0] == el[0]:
                        pair[1] += el[1]
                        break
        new_places.sort(key=lambda target: target[1])
        # Creating an answer
        for i in range(5):
            answer.append(new_places[len(new_places) - 1 - i][0] + " : " + str(new_places[len(new_places) - 1 - i][1]))

# –ù–µ–æ–±—Ö–æ–¥–∏–º–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /know_money
def get_money(name):
    my_xml = requests.get("https://www.cbr-xml-daily.ru/daily_json.js").json()
    countries = my_xml["Valute"]
    answer = ""
    for country in countries.keys():
        all_feat = countries[country] #—Å–ª–æ–≤–∞—Ä–∏–∫ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –æ –≤–∞–ª—é—Ç–µ
        if all_feat['Name'] == name[:-2]:
            answer = f"–°—Ç–æ–∏–º–æ—Å—Ç—å {all_feat['Name']} —Å–µ–π—á–∞—Å {all_feat['Value']} ‚ÇΩ"
    return answer

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã. –¢—É—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤—Å—è –ª–æ–≥–∏–∫–∞ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–ª–∞–≤–∏—à–∏:
def keyboard_handler(update: Update, context: CallbackContext):
    query = update.callback_query
    data = query.data
    chat_id = update.effective_message.chat_id
    if data == BUTTON1 or data == BUTTON2:
        text = ""
        if data == BUTTON1:
            Location_Aspect["location"] = "Province_State"
            text = "–í—ã–±–µ—Ä–µ—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–π, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω —Ç–æ–ø 5 –ø—Ä–æ–≤–∏–Ω–∏—Ü–∏–π/—à—Ç–∞—Ç–æ–≤ —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π!"
        elif data == BUTTON2:
            Location_Aspect["location"] = "Country_Region"
            text = "–í—ã–±–µ—Ä–µ—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–π, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ —Ç–æ–ø 5 —Å—Ç—Ä–∞–Ω/—Ä–µ–≥–∏–æ–Ω–æ–≤ —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π!"
        context.bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=aspect_keyboard(),
        )
    elif data == BUTTON3 or data == BUTTON4 or data == BUTTON5:
        smile = ""
        if data == BUTTON3:
            Location_Aspect["aspect"] = "Confirmed"
            smile = 'üò∑ü§í'
        elif data == BUTTON4:
            Location_Aspect["aspect"] = "Deaths"
            smile = 'üòµ'
        elif data == BUTTON5:
            Location_Aspect["aspect"] = "Recovered"
            smile = 'üòá'
        answer = download_actual_file()
        answer.append(Location_Aspect["aspect"] + ':' + smile)
        get_necessary_corona_info(Location_Aspect["location"], Location_Aspect["aspect"], answer)
        context.bot.send_message(
            chat_id=chat_id,
            text='\n'.join(answer),
        )
    elif data == BUTTON6 or data == BUTTON7 or data == BUTTON8:
        place = ""
        if data == BUTTON6:
            place = TITLES[BUTTON6]
        if data == BUTTON7:
            place = TITLES[BUTTON7]
        if data == BUTTON8:
            place = TITLES[BUTTON8]
        Location_Aspect["CURRENT_CITY"] = place
        owm = pyowm.OWM('6d00d1d4e704068d70191bad2673e0cc', language="ru")
        observation = owm.weather_at_place(place)
        w = observation.get_weather()
        status = w.get_detailed_status()
        temp = w.get_temperature('celsius')
        answer = "–í –≥–æ—Ä–æ–¥–µ " + place + " —Å–µ–π—á–∞—Å " + status
        if status == "—è—Å–Ω–æ":
            answer += "‚òÄ\n"
        elif status == "–æ–±–ª–∞—á–Ω–æ":
            answer += "‚òÅ\n"
        elif status == "–¥–æ–∂–¥–ª–∏–≤–æ":
            answer += "üåß\n"
        else:
            answer += "\n"
        if temp["temp"] <= 0:
            answer += "–°–µ–π—á–∞—Å –æ—á–µ–Ω—å —Ö–æ–ª–æ–¥–Ω–æ! –û–¥–µ–≤–∞–π—Å—è –∫–∞–∫ —Ç–∞–Ω–∫!! ü•∂\n"
        elif temp["temp"] < 16:
            answer += "–°–µ–π—á–∞—Å –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ, –ª—É—á—à–µ –æ–¥–µ–Ω—å—Å—è –ø–æ—Ç–µ–ø–ª–µ–µ! üëç\n"
        else:
            answer += "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –≤ —Å–∞–º—ã–π —Ä–∞–∑! –û–¥–µ–≤–∞–π—Å—è, –∫–∞–∫ —Ö–æ—á–µ—à—å! üòä\n"
        context.bot.send_message(
            chat_id=chat_id,
            text=answer,
            reply_markup=detailed_info_about_weather_keyboard(),
        )
    elif data == BUTTON9:
        owm = pyowm.OWM('6d00d1d4e704068d70191bad2673e0cc', language="ru")
        observation = owm.weather_at_place(Location_Aspect["CURRENT_CITY"])
        w = observation.get_weather()
        status = w.get_detailed_status()
        temp = w.get_temperature('celsius')
        sunrise = w.get_sunrise_time('iso')
        sunset = w.get_sunset_time('iso')
        sunrise = sunrise[sunrise.find(" "): sunrise.find("+")]
        sunset = sunset[sunset.find(" "): sunset.find("+")]
        shift = int(sunrise[:sunrise.find(":")]) + 3
        if shift < 10:
            sunrise = '0' + str(shift) + sunrise[sunrise.find(":"):]
        else:
            sunrise = str(shift) + sunrise[sunrise.find(":"):]
        shift = int(sunset[:sunset.find(":")]) + 3
        if shift < 10:
            sunset = '0' + str(shift) + sunset[sunset.find(":"):]
        else:
            sunset = str(shift) + sunset[sunset.find(":"):]
        answer = "–°–µ–≥–æ–¥–Ω—è: \n"
        answer += "‚úÖ –í –≥–æ—Ä–æ–¥–µ " + Location_Aspect["CURRENT_CITY"] + " —Å–µ–π—á–∞—Å " + status + '\n'
        answer += "‚úÖ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: " + str(temp["temp_max"]) + ' –≥—Ä–∞–¥—É—Å–æ–≤ \n'
        answer += "‚úÖ –°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: " + str(temp["temp"]) + ' –≥—Ä–∞–¥—É—Å–æ–≤ \n'
        answer += "‚úÖ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: " + str(temp["temp_min"]) + ' –≥—Ä–∞–¥—É—Å–æ–≤ \n'
        answer += "‚úÖ –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: " + str(w.get_wind()['speed']) + ' –º/—Å \n'
        answer += "‚úÖ –í–ª–∞–∂–Ω–æ—Å—Ç—å –≤–æ–∑–¥—É—Ö–∞: " + str(w.get_humidity()) + ' % \n'
        answer += "‚úÖ –î–∞–≤–ª–µ–Ω–∏–µ: " + str(round(w.get_pressure()['press'] * 100 * 0.00750063755419211)) + ' –º–º.—Ä—Ç.—Å—Ç\n'
        answer += "‚úÖ –í—Ä–µ–º—è —Ä–∞—Å—Å–≤–µ—Ç–∞: " + sunrise + ' \n'
        answer += "‚úÖ –í—Ä–µ–º—è –∑–∞–∫–∞—Ç–∞: " + sunset + ' \n'
        context.bot.send_message(
            chat_id=chat_id,
            text=answer,
        )
    elif data == BUTTON10:
        name = TITLES[BUTTON10]
        context.bot.send_message(
            chat_id=chat_id,
            text=get_money(name),
        )
    elif data == BUTTON11:
        name = TITLES[BUTTON11]
        context.bot.send_message(
            chat_id=chat_id,
            text=get_money(name),
        )

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞, –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤, –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞:
def main():
    bot = Bot(
        token=TOKEN,
        base_url=PROXY,  # delete it if connection via VPN
    )
    updater = Updater(bot=bot, use_context=True)

    # on different commands - answer in Telegram
    updater.dispatcher.add_handler(CommandHandler('start', start))
    updater.dispatcher.add_handler(CommandHandler('help', chat_help))
    updater.dispatcher.add_handler(CommandHandler('history', history))
    updater.dispatcher.add_handler(CommandHandler('time', elapsed_time))
    updater.dispatcher.add_handler(CommandHandler('date', date))
    updater.dispatcher.add_handler(CommandHandler('fact', fact))
    updater.dispatcher.add_handler(CommandHandler('weather', check_weather))
    updater.dispatcher.add_handler(CommandHandler('corono_stats', corono_stats))
    updater.dispatcher.add_handler(CommandHandler('check_exchange_rates', money))
    updater.dispatcher.add_handler(CallbackQueryHandler(callback=keyboard_handler, pass_chat_data=True))

    # on noncommand i.e message - echo the message on Telegram
    updater.dispatcher.add_handler(MessageHandler(Filters.text, echo))

    # log all errors
    updater.dispatcher.add_error_handler(error)

    # Start the Bot
    updater.start_polling()

    # Run the bot until you press Ctrl-C or the process receives SIGINT,
    # SIGTERM or SIGABRT. This should be used most of the time, since
    # start_polling() is non-blocking and will stop the bot gracefully.
    updater.idle()


if __name__ == '__main__':
    logger.info('Start Bot')
    main()